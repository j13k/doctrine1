# Upgrade from 1.1 to 1.2

This document details the changes made to Doctrine 1.2 to make it easier for you
to upgrade your projects to use this version.

## Removed Attribute String Support

The string support of `Doctrine_Configurable::getAttribute()` and `Doctrine_Configurable::setAttribute()` have been removed.

The reason is that the performance of this simple convenience feature is significant and it is totally unneeded.

The following code is no longer supported.

    [php]
    $connection->setAttribute('use_native_enum', true);

You must now always use the following code.

    [php]
    $connection->setAttribute(Doctrine::ATTR_USE_NATIVE_ENUM, true);

## Removed all Deprecated Functions

Removed all functions labeled `@deprecated` in the doc blocks.

Affected Classes

* Doctrine_Query
* Doctrine_Query_Abstract

## Renamed Methods

* Doctrine_Query_Abstract::getSql() to getSqlQuery()
* Doctrine_Search_Query::getSql() to getSqlQuery()
* Doctrine_Query_Abstract::getCountQuery() to getCountSqlQuery()
* Doctrine_RawSql::getCountQuery() to getCountSqlQuery()

## Added ability to configure base table class for class builder

Introduced option named `baseTableClassName` to configure the class child `Doctrine_Table` instances use which defaults to `Doctrine_Table`.

    [php]
    $builder = new Doctrine_Import_Builder();
    $builder->setOption('baseTableClassName', 'MyBaseTable');

## Added ability to configure query class

Before Doctrine 1.2 it was hard coded internally to always use the `Doctrine_Query` class whenever you instantiate a new query. Now you can configure which class this is to use by setting the `Doctrine::ATTR_QUERY_CLASS` attribute.

    [php]
    class MyQuery extends Doctrine_Query
    {
      
    }

    $manager->setAttribute(Doctrine::ATTR_QUERY_CLASS, 'MyQuery');

    $q = Doctrine_Query::create();

    echo get_class($q); // MyQuery

## Changed Doctrine_Parser_Xml::arrayToXml() to be static

Now the `arrayToXml()` method can be called directly because it is static.

    [php]
    $array = array(
      'key1' => 'value',
      'key2' => 'value'
    );
    $xml = Doctrine_Parser_Xml::arrayToXml($array);

## Refactored Migrations to better handle multiple connections

Now when working with `Doctrine_Migration` instance you can specify as the 2nd
argument to the constructor the connection instance to use for the migrations.

Migrations for different databases should be handled with a different set of 
migration classes.

Previous method of finding connection based on the table name is flawed since 
databases could have the same table name multiple times.

    [php]
    $conn = Doctrine_Manager::connection();
    $migration = new Doctrine_Migration('/path/to/migrations', $conn);

## Added option for save cascading

Added a new attribute to control whether cascading save operations are done by 
default. Previous to Doctrine 1.2 they were always cascaded.

As of 1.2 it will now only cascade if the record is dirty. The cost of this is 
that you can't cascade and save records who are dirty that are more then one 
level deep in the hierarchy.

See: http://trac.doctrine-project.org/ticket/1623

    [php]
    $manager->setAttribute(Doctrine::ATTR_CASCADE_SAVES, false);

Disabling this will increase performance significantly when saving objects.

## Added Doctrine::setPath()

Now you can specify the path to your Doctrine libraries if Doctrine.php is outside of the location of your libraries.

So if `Doctrine.php` is located at `/path/to/Doctrine.php` and the actual 
libraries are at `/path/to/the/doctrine/libs` you would need to do the 
following.

    [php]
    Doctrine::setPath('/path/to/the/doctrine/libs');